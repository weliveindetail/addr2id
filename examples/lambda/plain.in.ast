TranslationUnitDecl 0x7fa186040008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa186040918 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa1860405a0 '__int128'
|-TypedefDecl 0x7fa186040988 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa1860405c0 'unsigned __int128'
|-TypedefDecl 0x7fa186040d28 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x7fa186040a70 '__NSConstantString_tag'
|   `-CXXRecord 0x7fa1860409e0 '__NSConstantString_tag'
|-TypedefDecl 0x7fa186040dd0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa186040d80 'char *'
|   `-BuiltinType 0x7fa1860400a0 'char'
|-TypedefDecl 0x7fa18607b950 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag [1]'
| `-ConstantArrayType 0x7fa18607b8f0 '__va_list_tag [1]' 1 
|   `-RecordType 0x7fa186040ec0 '__va_list_tag'
|     `-CXXRecord 0x7fa186040e28 '__va_list_tag'
`-FunctionDecl 0x7fa18607bc28 <plain.cpp:1:1, line:4:1> line:1:5 main 'int (int, char **)'
  |-ParmVarDecl 0x7fa18607b9c0 <col:10, col:14> col:14 used argc 'int'
  |-ParmVarDecl 0x7fa18607bb08 <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt 0x7fa1860a9d58 <col:34, line:4:1>
    |-DeclStmt 0x7fa1860a9b90 <line:2:3, col:46>
    | `-VarDecl 0x7fa18607bd88 <col:3, col:45> col:8 used lambda '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)' cinit
    |   `-ExprWithCleanups 0x7fa1860a9b78 <col:17, col:45> '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)'
    |     `-CXXConstructExpr 0x7fa1860a9b48 <col:17, col:45> '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)' 'void ((lambda at plain.cpp:2:17) &&) noexcept' elidable
    |       `-MaterializeTemporaryExpr 0x7fa1860a9ae0 <col:17, col:45> '(lambda at plain.cpp:2:17)' xvalue
    |         `-LambdaExpr 0x7fa18607c6d8 <col:17, col:45> '(lambda at plain.cpp:2:17)'
    |           |-CXXRecordDecl 0x7fa18607bef8 <col:17> col:17 implicit class definition
    |           | |-DefinitionData lambda pass_in_registers empty standard_layout trivially_copyable can_const_default_init
    |           | | |-DefaultConstructor defaulted_is_constexpr
    |           | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
    |           | | |-MoveConstructor exists simple trivial
    |           | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
    |           | | |-MoveAssignment
    |           | | `-Destructor simple irrelevant trivial
    |           | |-CXXMethodDecl 0x7fa18607c038 <col:28, col:45> col:17 used operator() 'int (int) const' inline
    |           | | |-ParmVarDecl 0x7fa18607be08 <col:20, col:24> col:24 used argc 'int'
    |           | | `-CompoundStmt 0x7fa18607c2a0 <col:30, col:45>
    |           | |   `-ReturnStmt 0x7fa18607c290 <col:32, col:39>
    |           | |     `-ImplicitCastExpr 0x7fa18607c278 <col:39> 'int' <LValueToRValue>
    |           | |       `-DeclRefExpr 0x7fa18607c0f0 <col:39> 'int' lvalue ParmVar 0x7fa18607be08 'argc' 'int'
    |           | |-CXXConversionDecl 0x7fa18607c568 <col:17, col:45> col:17 implicit operator int (*)(int) 'int (*() const noexcept)(int)' inline
    |           | |-CXXMethodDecl 0x7fa18607c618 <col:17, col:45> col:17 implicit __invoke 'int (int)' static inline
    |           | | `-ParmVarDecl 0x7fa18607c500 <col:20, col:24> col:24 argc 'int'
    |           | |-CXXDestructorDecl 0x7fa18607c700 <col:17> col:17 implicit referenced ~ 'void () noexcept' inline default trivial
    |           | |-CXXConstructorDecl 0x7fa1860a9778 <col:17> col:17 implicit constexpr  'void (const (lambda at plain.cpp:2:17) &)' inline default trivial noexcept-unevaluated 0x7fa1860a9778
    |           | | `-ParmVarDecl 0x7fa1860a98a0 <col:17> col:17 'const (lambda at plain.cpp:2:17) &'
    |           | `-CXXConstructorDecl 0x7fa1860a9940 <col:17> col:17 implicit used constexpr  'void ((lambda at plain.cpp:2:17) &&) noexcept' inline default trivial
    |           |   |-ParmVarDecl 0x7fa1860a9a70 <col:17> col:17 '(lambda at plain.cpp:2:17) &&'
    |           |   `-CompoundStmt 0x7fa1860a9b38 <col:17>
    |           `-CompoundStmt 0x7fa18607c2a0 <col:30, col:45>
    |             `-ReturnStmt 0x7fa18607c290 <col:32, col:39>
    |               `-ImplicitCastExpr 0x7fa18607c278 <col:39> 'int' <LValueToRValue>
    |                 `-DeclRefExpr 0x7fa18607c0f0 <col:39> 'int' lvalue ParmVar 0x7fa18607be08 'argc' 'int'
    `-ReturnStmt 0x7fa1860a9d48 <line:3:3, col:21>
      `-CXXOperatorCallExpr 0x7fa1860a9d08 <col:10, col:21> 'int':'int' '()'
        |-ImplicitCastExpr 0x7fa1860a9c88 <col:16, col:21> 'int (*)(int) const' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x7fa1860a9be8 <col:16, col:21> 'int (int) const' lvalue CXXMethod 0x7fa18607c038 'operator()' 'int (int) const'
        |-ImplicitCastExpr 0x7fa1860a9cd8 <col:10> 'const (lambda at plain.cpp:2:17)' lvalue <NoOp>
        | `-DeclRefExpr 0x7fa1860a9ba8 <col:10> '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)' lvalue Var 0x7fa18607bd88 'lambda' '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)'
        `-ImplicitCastExpr 0x7fa1860a9cf0 <col:17> 'int' <LValueToRValue>
          `-DeclRefExpr 0x7fa1860a9bc8 <col:17> 'int' lvalue ParmVar 0x7fa18607b9c0 'argc' 'int'
