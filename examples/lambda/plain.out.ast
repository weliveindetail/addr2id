TranslationUnitDecl  <<invalid sloc>> <invalid sloc>
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType  '__int128'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType  'unsigned __int128'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType  '__NSConstantString_tag'
|   `-CXXRecord  '__NSConstantString_tag'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType  'char *'
|   `-BuiltinType  'char'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag [1]'
| `-ConstantArrayType  '__va_list_tag [1]' 1 
|   `-RecordType  '__va_list_tag'
|     `-CXXRecord  '__va_list_tag'
`-FunctionDecl  <plain.cpp:1:1, line:4:1> line:1:5 main 'int (int, char **)'
  |-ParmVarDecl ID0001 <col:10, col:14> col:14 used argc 'int'
  |-ParmVarDecl  <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt  <col:34, line:4:1>
    |-DeclStmt  <line:2:3, col:46>
    | `-VarDecl ID0002 <col:3, col:45> col:8 used lambda '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)' cinit
    |   `-ExprWithCleanups  <col:17, col:45> '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)'
    |     `-CXXConstructExpr  <col:17, col:45> '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)' 'void ((lambda at plain.cpp:2:17) &&) noexcept' elidable
    |       `-MaterializeTemporaryExpr  <col:17, col:45> '(lambda at plain.cpp:2:17)' xvalue
    |         `-LambdaExpr  <col:17, col:45> '(lambda at plain.cpp:2:17)'
    |           |-CXXRecordDecl  <col:17> col:17 implicit class definition
    |           | |-DefinitionData lambda pass_in_registers empty standard_layout trivially_copyable can_const_default_init
    |           | | |-DefaultConstructor defaulted_is_constexpr
    |           | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
    |           | | |-MoveConstructor exists simple trivial
    |           | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
    |           | | |-MoveAssignment
    |           | | `-Destructor simple irrelevant trivial
    |           | |-CXXMethodDecl ID0003 <col:28, col:45> col:17 used operator() 'int (int) const' inline
    |           | | |-ParmVarDecl ID0004 <col:20, col:24> col:24 used argc 'int'
    |           | | `-CompoundStmt ID0005 <col:30, col:45>
    |           | |   `-ReturnStmt ID0006 <col:32, col:39>
    |           | |     `-ImplicitCastExpr ID0007 <col:39> 'int' <LValueToRValue>
    |           | |       `-DeclRefExpr ID0008 <col:39> 'int' lvalue ParmVar ID0004 'argc' 'int'
    |           | |-CXXConversionDecl  <col:17, col:45> col:17 implicit operator int (*)(int) 'int (*() const noexcept)(int)' inline
    |           | |-CXXMethodDecl  <col:17, col:45> col:17 implicit __invoke 'int (int)' static inline
    |           | | `-ParmVarDecl  <col:20, col:24> col:24 argc 'int'
    |           | |-CXXDestructorDecl  <col:17> col:17 implicit referenced ~ 'void () noexcept' inline default trivial
    |           | |-CXXConstructorDecl ID0009 <col:17> col:17 implicit constexpr  'void (const (lambda at plain.cpp:2:17) &)' inline default trivial noexcept-unevaluated ID0009
    |           | | `-ParmVarDecl  <col:17> col:17 'const (lambda at plain.cpp:2:17) &'
    |           | `-CXXConstructorDecl  <col:17> col:17 implicit used constexpr  'void ((lambda at plain.cpp:2:17) &&) noexcept' inline default trivial
    |           |   |-ParmVarDecl  <col:17> col:17 '(lambda at plain.cpp:2:17) &&'
    |           |   `-CompoundStmt  <col:17>
    |           `-CompoundStmt ID0005 <col:30, col:45>
    |             `-ReturnStmt ID0006 <col:32, col:39>
    |               `-ImplicitCastExpr ID0007 <col:39> 'int' <LValueToRValue>
    |                 `-DeclRefExpr ID0008 <col:39> 'int' lvalue ParmVar ID0004 'argc' 'int'
    `-ReturnStmt  <line:3:3, col:21>
      `-CXXOperatorCallExpr  <col:10, col:21> 'int':'int' '()'
        |-ImplicitCastExpr  <col:16, col:21> 'int (*)(int) const' <FunctionToPointerDecay>
        | `-DeclRefExpr  <col:16, col:21> 'int (int) const' lvalue CXXMethod ID0003 'operator()' 'int (int) const'
        |-ImplicitCastExpr  <col:10> 'const (lambda at plain.cpp:2:17)' lvalue <NoOp>
        | `-DeclRefExpr  <col:10> '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)' lvalue Var ID0002 'lambda' '(lambda at plain.cpp:2:17)':'(lambda at plain.cpp:2:17)'
        `-ImplicitCastExpr  <col:17> 'int' <LValueToRValue>
          `-DeclRefExpr  <col:17> 'int' lvalue ParmVar ID0001 'argc' 'int'
